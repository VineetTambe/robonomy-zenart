import numpy as np
from autolab_core import RigidTransform

from frankapy import FrankaArm
import time 

from autolab_core import RigidTransform
from frankapy import FrankaArm, SensorDataMessageType
from frankapy import FrankaConstants as FC
from frankapy.proto_utils import sensor_proto2ros_msg, make_sensor_group_msg
from frankapy.proto import PosePositionSensorMessage, ShouldTerminateSensorMessage
from franka_interface_msgs.msg import SensorDataGroup

from frankapy.utils import convert_array_to_rigid_transform

if __name__ == "__main__":
    fa = FrankaArm()
    
    # reset franka to its home joints
    print("starting script")

    fa.reset_joints()

    # record traj this way ->

    # guide_duration =  1000
    # fa.run_guide_mode(guide_duration, block=False) #hitting joint limit will end early
    # while True:
    #     print('-'*20)
    #     print(fa.get_pose())
    #     print(fa.get_joints())
    #     time.sleep(5)

    # ------------------------------

    # create pose list 
    pose_traj = []
    # pose_traj.append ([np.asarray([0.52413815, -0.05815484, 0.10330608]), 
    # np.asarray([[ 0.90974968,  0.05315474,  0.4117209 ],[0.08631803, -0.99430419, -0.0623634 ],[ 0.40606091,  0.09227402, -0.90917364]])
    # ])
    # pose_traj.append ([np.asarray([0.42188508, -0.05785421, 0.09988752]), 
    # np.asarray([[ 0.94589234,  0.01259928,  0.32420937],[ 0.02947199, -0.99844165, -0.04718549],[0.32310963,  0.05418749, -0.94480782]])
    # ])
    # pose_traj.append ([np.asarray([0.43647234, 0.08849396, 0.10041722]), 
    # np.asarray([[0.88488122,  0.32621781,  0.33249066],[0.31405794, -0.94498986,  0.09133828],[0.34399648,  0.02359781, -0.93867315]])
    # ])
    # pose_traj.append ([np.asarray([0.51527519, 0.11478321, 0.14707815]), 
    # np.asarray([[0.93880374,  0.0794724,  -0.33513369],[ 0.04429971, -0.99278585, -0.11133186],[-0.34156379 , 0.08967244 ,-0.93556968]])
    # ])

    # pose_traj.append ([np.asarray([0.50244587, 0.11376891, 0.10473476]), 
    # np.asarray([[ 0.91228468,  0.0866207 , -0.4002716 ],[0.04264063, -0.99214481, -0.11752218],[-0.40730724,  0.09014585, -0.90882957]])
    # ])
    # pose_traj.append ([np.asarray([0.60345474, 0.1097945,  0.1073081 ]), 
    # np.asarray([[ 0.95793192 , 0.02470754, -0.28589911],[0.00447121 ,-0.99744104 ,-0.07121951],[-0.28692716 , 0.06694513, -0.95560948]])
    # ])
    # pose_traj.append ([np.asarray([0.52413815, -0.05815484, 0.10330608]), 
    # np.asarray([[ 0.90974968,  0.05315474,  0.4117209 ],[0.08631803, -0.99430419, -0.0623634 ],[ 0.40606091,  0.09227402, -0.90917364]])
    # ])

    pose_traj.append ([np.asarray([0.52413815, -0.05815484, 0.10330608]), 
    np.asarray([[ 0.90974968,  0.05315474,  0.4117209 ],[0.08631803, -0.99430419, -0.0623634 ],[ 0.40606091,  0.09227402, -0.90917364]])
    ])
    pose_traj.append ([np.asarray([0.42188508, -0.05785421, 0.10330608]), 
    np.asarray([[ 0.94589234,  0.01259928,  0.32420937],[ 0.02947199, -0.99844165, -0.04718549],[0.32310963,  0.05418749, -0.94480782]])
    ])
    pose_traj.append ([np.asarray([0.43647234, 0.08849396, 0.10330608]), 
    np.asarray([[0.88488122,  0.32621781,  0.33249066],[0.31405794, -0.94498986,  0.09133828],[0.34399648,  0.02359781, -0.93867315]])
    ])
    pose_traj.append ([np.asarray([0.51527519, 0.11478321, 0.2]), 
    np.asarray([[0.93880374,  0.0794724,  -0.33513369],[ 0.04429971, -0.99278585, -0.11133186],[-0.34156379 , 0.08967244 ,-0.93556968]])
    ])

    pose_traj.append ([np.asarray([0.52, 0.08849396, 0.10330608]), 
    np.asarray([[ 0.91228468,  0.0866207 , -0.4002716 ],[0.04264063, -0.99214481, -0.11752218],[-0.40730724,  0.09014585, -0.90882957]])
    ])
    pose_traj.append ([np.asarray([0.60345474, 0.1097945,  0.1073081 ]), 
    np.asarray([[ 0.95793192 , 0.02470754, -0.28589911],[0.00447121 ,-0.99744104 ,-0.07121951],[-0.28692716 , 0.06694513, -0.95560948]])
    ])
    pose_traj.append ([np.asarray([0.52413815, -0.05815484, 0.10330608]), 
    np.asarray([[ 0.90974968,  0.05315474,  0.4117209 ],[0.08631803, -0.99430419, -0.0623634 ],[ 0.40606091,  0.09227402, -0.90917364]])
    ])

    for i,pose in enumerate(pose_traj):
        pose_rt = RigidTransform(rotation = pose[1], translation = pose[0], from_frame='franka_tool', to_frame='world')
        fa.goto_pose(pose_rt)
        time.sleep(1)
    
    fa.reset_joints()


    # pos1

#     Tra: [ 0.52413815 -0.05815484  0.10330608]
#  Rot: [[ 0.90974968  0.05315474  0.4117209 ]
#  [ 0.08631803 -0.99430419 -0.0623634 ]
#  [ 0.40606091  0.09227402 -0.90917364]]
#  Qtn: [0.03959481 0.97637435 0.03571191 0.20939249]
#  from franka_tool to world
# [-0.0160841   0.32599785 -0.1356909  -2.54449268 -0.2343723   3.30181658
#   0.81658937]

# po2 
# Tra: [ 0.42188508 -0.05785421  0.09988752]
#  Rot: [[ 0.94589234  0.01259928  0.32420937]
#  [ 0.02947199 -0.99844165 -0.04718549]
#  [ 0.32310963  0.05418749 -0.94480782]]
#  Qtn: [0.0257019  0.98604536 0.01066667 0.16411999]
#  from franka_tool to world
# [-0.02425771  0.14591144 -0.16640809 -2.82094023 -0.23435369  3.30288815
#   0.81659079]

# pos3 
# Tra: [0.43647234 0.08849396 0.10041722]
#  Rot: [[ 0.88488122  0.32621781  0.33249066]
#  [ 0.31405794 -0.94498986  0.09133828]
#  [ 0.34399648  0.02359781 -0.93867315]]
#  Qtn: [-0.01744743  0.97063693  0.16491124  0.17423795]
#  from franka_tool to world
# [ 0.07643085  0.18138239  0.05629583 -2.76883916 -0.23412459  3.30315866
#   0.81659008]

# inters 
# Tra: [0.51527519 0.11478321 0.14707815]
#  Rot: [[ 0.93880374  0.0794724  -0.33513369]
#  [ 0.04429971 -0.99278585 -0.11133186]
#  [-0.34156379  0.08967244 -0.93556968]]
#  Qtn: [ 0.05110688  0.98325471  0.03147    -0.17205549]
#  from franka_tool to world
# [ 0.10468292  0.38567076  0.13196838 -1.9952928  -0.08797871  2.01596127
#   1.00990258]


# pos4
# Tra: [0.50244587 0.11376891 0.10473476]
#  Rot: [[ 0.91228468  0.0866207  -0.4002716 ]
#  [ 0.04264063 -0.99214481 -0.11752218]
#  [-0.40730724  0.09014585 -0.90882957]]
#  Qtn: [ 0.05317304  0.97637839  0.03309714 -0.20677917]
#  from franka_tool to world
# [ 0.10538227  0.47134187  0.13124125 -1.98871368 -0.08941461  2.02409675
#   1.00989523]

# pos5 
# Tra: [0.60345474 0.1097945  0.1073081 ]
#  Rot: [[ 0.95793192  0.02470754 -0.28589911]
#  [ 0.00447121 -0.99744104 -0.07121951]
#  [-0.28692716  0.06694513 -0.95560948]]
#  Qtn: [ 0.03493204  0.9888102   0.00737724 -0.14482716]
#  from franka_tool to world
# [ 0.09298362  0.64299822  0.1066124  -1.68480896 -0.08941783  2.02409355
#   1.00987531]


